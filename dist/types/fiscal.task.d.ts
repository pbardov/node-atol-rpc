import { JsonTaskType } from './json-task-type.js';
import { type JsonTask } from './json-task.js';
import { type TaxationType } from './taxation-type.js';
import { type Operator } from './operator.js';
import { type ClientInfo } from './client-info.js';
import { type CompanyInfo } from './company-info.js';
import { type AgentInfo } from './agent-info.js';
import { type SupplierInfo } from './supplier-info.js';
import { type OperationInfo } from './operation-info.js';
import { type IndustryInfo } from './industry-info.js';
import { type DocumentItem, type DocumentPrintItem } from './document-item.js';
import { type Payment } from './payment.js';
import { type Tax } from './tax.js';
import { type CustomParameter } from './custom-parameter.js';
import { type UserAttribute } from './user-attribute.js';
declare const fiscalTaskTypes: readonly [JsonTaskType.sell, JsonTaskType.buy, JsonTaskType.sellReturn, JsonTaskType.buyReturn];
type FiscalTaskTypesTuple = typeof fiscalTaskTypes;
export type FiscalTaskTypes = FiscalTaskTypesTuple[number];
export type FiscalTask<T extends FiscalTaskTypes = FiscalTaskTypes> = JsonTask & {
    type: T;
    ignoreNonFiscalPrintErrors?: boolean;
    electronically?: boolean;
    taxationType?: TaxationType;
    paymentsPlace?: string;
    paymentsAddress: string;
    machineNumber?: string;
    operator?: Operator;
    clientInfo?: ClientInfo;
    companyInfo?: CompanyInfo;
    agentInfo?: AgentInfo;
    supplierInfo?: SupplierInfo;
    operationInfo?: OperationInfo;
    industryInfo?: IndustryInfo;
    items: DocumentItem[];
    payments: Payment[];
    taxes: Tax[];
    total?: number;
    preItems?: DocumentPrintItem[];
    postItems?: DocumentPrintItem[];
    validateMarkingCodes?: boolean;
    customParameters?: CustomParameter[];
    salesNotice?: UserAttribute[];
};
export type SellTask = FiscalTask<JsonTaskType.sell>;
export type BuyTask = FiscalTask<JsonTaskType.buy>;
export type SellReturnTask = FiscalTask<JsonTaskType.sellReturn>;
export type BuyReturnTask = FiscalTask<JsonTaskType.buyReturn>;
export declare const fiscalTaskTypeGuard: <T extends FiscalTaskTypes>(types: T[]) => import("../common/types/type-guard.js").TypeGuardDetail<FiscalTask<T>>;
export declare const isFiscalTask: import("../common/types/type-guard.js").TypeGuardDetail<FiscalTask<JsonTaskType.sell | JsonTaskType.buy | JsonTaskType.sellReturn | JsonTaskType.buyReturn>>;
export declare const isSellTask: import("../common/types/type-guard.js").TypeGuardDetail<FiscalTask<JsonTaskType.sell>>;
export declare const isBuyTask: import("../common/types/type-guard.js").TypeGuardDetail<FiscalTask<JsonTaskType.buy>>;
export declare const isSellReturnTask: import("../common/types/type-guard.js").TypeGuardDetail<FiscalTask<JsonTaskType.sellReturn>>;
export declare const isBuyReturnTask: import("../common/types/type-guard.js").TypeGuardDetail<FiscalTask<JsonTaskType.buyReturn>>;
export {};
//# sourceMappingURL=fiscal.task.d.ts.map